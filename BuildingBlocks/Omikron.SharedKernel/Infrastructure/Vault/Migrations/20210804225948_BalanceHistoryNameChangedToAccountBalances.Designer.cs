// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Omikron.SharedKernel.Infrastructure.Vault.Data;

namespace Omikron.SharedKernel.Infrastructure.Vault.Migrations
{
    [DbContext(typeof(VaultServiceDatabaseContext))]
    [Migration("20210804225948_BalanceHistoryNameChangedToAccountBalances")]
    partial class BalanceHistoryNameChangedToAccountBalances
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("vault")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Omikron.VaultService.Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0679fd05-4c37-4eec-a029-62138d8e82b1"),
                            CreatedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Currency = "GBP",
                            ExternalId = new Guid("0679fd05-4c37-4eec-a029-62138d8e82b1"),
                            ModifiedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Name = "Holiday",
                            OwnerId = "D15D234D-D886-4F14-B3B0-480CBBABF6B1",
                            Provider = "Santader",
                            Source = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("3e28b304-faa8-4942-8c9b-4cf6fb6c621c"),
                            CreatedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Currency = "GBP",
                            ExternalId = new Guid("3e28b304-faa8-4942-8c9b-4cf6fb6c621c"),
                            ModifiedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Name = "Car",
                            OwnerId = "D15D234D-D886-4F14-B3B0-480CBBABF6B1",
                            Provider = "Santader",
                            Source = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("61b49ed2-7b6a-46b3-bd20-efcbc914bcb1"),
                            CreatedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Currency = "GBP",
                            ExternalId = new Guid("61b49ed2-7b6a-46b3-bd20-efcbc914bcb1"),
                            ModifiedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Name = "House",
                            OwnerId = "D15D234D-D886-4F14-B3B0-480CBBABF6B1",
                            Provider = "Santader",
                            Source = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("769dd368-4d01-4aa1-80c7-17b5a82793bb"),
                            CreatedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Currency = "GBP",
                            ExternalId = new Guid("769dd368-4d01-4aa1-80c7-17b5a82793bb"),
                            ModifiedAt = new DateTime(2021, 8, 1, 17, 55, 0, 0, DateTimeKind.Utc),
                            Name = "Everyday",
                            OwnerId = "D15D234D-D886-4F14-B3B0-480CBBABF6B1",
                            Provider = "Santader",
                            Source = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Omikron.VaultService.Domain.Models.AccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountBalances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f778481-e5e4-4199-bef7-7eff404090e2"),
                            AccountId = new Guid("0679fd05-4c37-4eec-a029-62138d8e82b1"),
                            Amount = 1321.23m,
                            CreatedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(2572),
                            EntryDate = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(4052),
                            ModifiedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(2587),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("eeab52ea-f443-4e28-8a6f-65de9ee231a2"),
                            AccountId = new Guid("0679fd05-4c37-4eec-a029-62138d8e82b1"),
                            Amount = 13223.23m,
                            CreatedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6285),
                            EntryDate = new DateTime(2021, 8, 2, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6301),
                            ModifiedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6288),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("2be0a47b-63ca-4831-8f88-c78b4a041f3a"),
                            AccountId = new Guid("3e28b304-faa8-4942-8c9b-4cf6fb6c621c"),
                            Amount = 2223.23m,
                            CreatedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6332),
                            EntryDate = new DateTime(2021, 8, 2, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6338),
                            ModifiedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6333),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d2cfab5b-dabd-47f7-a1b4-cf4d92d51eb2"),
                            AccountId = new Guid("61b49ed2-7b6a-46b3-bd20-efcbc914bcb1"),
                            Amount = 5223.23m,
                            CreatedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6340),
                            EntryDate = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6344),
                            ModifiedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6340),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("ef657a9c-2862-46e2-8de0-777234b8eed4"),
                            AccountId = new Guid("769dd368-4d01-4aa1-80c7-17b5a82793bb"),
                            Amount = 5223.23m,
                            CreatedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6345),
                            EntryDate = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6351),
                            ModifiedAt = new DateTime(2021, 8, 4, 22, 59, 47, 557, DateTimeKind.Utc).AddTicks(6346),
                            Type = 2
                        });
                });

            modelBuilder.Entity("Omikron.VaultService.Domain.Models.AccountBalance", b =>
                {
                    b.HasOne("Omikron.VaultService.Domain.Models.Account", "Account")
                        .WithMany("AccountBalances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Omikron.VaultService.Domain.Models.Account", b =>
                {
                    b.Navigation("AccountBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
