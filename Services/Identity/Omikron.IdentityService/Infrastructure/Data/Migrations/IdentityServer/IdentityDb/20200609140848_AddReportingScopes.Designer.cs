// <auto-generated />
using System;
using Omikron.IdentityService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Omikron.IdentityService.Infrastructure.Data.Migrations.IdentityServer.IdentityDb
{
    [DbContext(typeof(OmikronIdentityDbContext))]
    [Migration("20200609140848_AddReportingScopes")]
    partial class AddReportingScopes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("usm")
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.ConfirmationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationTokens");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 187, DateTimeKind.Utc).AddTicks(2074),
                            Description = "Ability to see a page with a list of tenants alongside with search functionality.",
                            Domain = 1,
                            ExternalId = new Guid("18bb49e7-69ed-47bd-bfc6-5372dd15315a"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 187, DateTimeKind.Utc).AddTicks(2135),
                            Name = "Search.Tenants",
                            NormalizedName = "SEARCH.TENANTS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 187, DateTimeKind.Utc).AddTicks(9955),
                            Description = "Ability to see button for add tenant alongside with ability to create tenant. Required Permissions: Search.Tenants",
                            Domain = 1,
                            ExternalId = new Guid("9feb92a5-398f-4069-8f5f-6da5212af3f2"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 187, DateTimeKind.Utc).AddTicks(9957),
                            Name = "Add.Tenant",
                            NormalizedName = "ADD.TENANT"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(90),
                            Description = "Ability to navigate to tenant details page and edit tenant. Required Permissions: Search.Tenants",
                            Domain = 1,
                            ExternalId = new Guid("cba862dc-fd5f-4c70-84a6-3fb16cb868e1"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(92),
                            Name = "Edit.Tenant",
                            NormalizedName = "EDIT.TENANT"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(104),
                            Description = "Ability to navigate to tenant details page without ability to edit tenant. Required Permissions: Search.Tenants",
                            Domain = 1,
                            ExternalId = new Guid("865dd083-5872-406a-bf8b-bd440f31d6fe"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(105),
                            Name = "Read.Tenant",
                            NormalizedName = "READ.TENANT"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(115),
                            Description = "Ability to see delete action alongside with ability to delete tenant. Required Permissions: Search.Tenants, Edit.Tenant",
                            Domain = 1,
                            ExternalId = new Guid("e445a667-0a50-470f-84d5-84959adca363"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(116),
                            Name = "Delete.Tenant",
                            NormalizedName = "DELETE.TENANT"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(134),
                            Description = "Ability to see a page with a list of users alongside with search functionality.",
                            Domain = 2,
                            ExternalId = new Guid("8d5e1370-d20c-4e2e-9a93-84f5d4e620c4"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(136),
                            Name = "Search.Users",
                            NormalizedName = "SEARCH.USERS"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(144),
                            Description = "Ability to see button for add user alongside with ability to create user. Required Permissions: Search.Users",
                            Domain = 2,
                            ExternalId = new Guid("0ebcb068-fe5b-4696-9392-eca13615139c"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(145),
                            Name = "Add.User",
                            NormalizedName = "ADD.USER"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(155),
                            Description = "Ability to navigate to user details page and edit user. Required Permissions: Search.Users",
                            Domain = 2,
                            ExternalId = new Guid("9c0d6b32-6f5f-41a3-8336-43f33dd61477"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(157),
                            Name = "Edit.User",
                            NormalizedName = "EDIT.USER"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(169),
                            Description = "Ability to see delete action alongside with ability to delete user. Required Permissions: Search.Users, Edit.User",
                            Domain = 2,
                            ExternalId = new Guid("d686c12f-8ac8-4214-a1a2-e8b7d02b18ad"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(169),
                            Name = "Delete.User",
                            NormalizedName = "DELETE.USER"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(186),
                            Description = "Ability to navigate to user details page without ability to edit user. Required Permissions: Search.Users",
                            Domain = 2,
                            ExternalId = new Guid("57c57548-266d-4cd3-a35e-de256c6cedd8"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(187),
                            Name = "Read.User",
                            NormalizedName = "READ.USER"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(194),
                            Description = "Ability to see a page with a list of roles alongside with search functionality.",
                            Domain = 3,
                            ExternalId = new Guid("42dc28e4-deca-41bf-960f-f63d4ad41e43"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(194),
                            Name = "Search.Roles",
                            NormalizedName = "SEARCH.ROLES"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(200),
                            Description = "Ability to see button for add role alongside with ability to create role. Required Permissions: Search.Roles",
                            Domain = 3,
                            ExternalId = new Guid("dd37cf7c-da69-4136-8d0b-96f2f40563c4"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(201),
                            Name = "Add.Role",
                            NormalizedName = "ADD.ROLE"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(213),
                            Description = "Ability to navigate to role details page and edit role. Required Permissions: Search.Roles, Edit.Roles",
                            Domain = 3,
                            ExternalId = new Guid("e4cc40f5-2100-497d-8b58-33667376a99a"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(213),
                            Name = "Edit.Role",
                            NormalizedName = "EDIT.ROLE"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(225),
                            Description = "Ability to see delete action alongside with ability to delete role. Required Permissions: Search.Roles, Edit.Roles",
                            Domain = 3,
                            ExternalId = new Guid("426d5137-c41c-4962-a1e0-3fa5c1dbbc45"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(226),
                            Name = "Delete.Role",
                            NormalizedName = "DELETE.ROLE"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(237),
                            Description = "Ability to navigate to role details page without ability to edit role. Required Permissions: Search.Roles",
                            Domain = 3,
                            ExternalId = new Guid("0d6dac73-8728-4d9f-951f-ef4db97c996f"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(238),
                            Name = "Read.Role",
                            NormalizedName = "READ.ROLE"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(251),
                            Description = "Ability to run into interactive view in order to see required permissions for protected parts of the system.",
                            Domain = 3,
                            ExternalId = new Guid("68e3c31c-aade-41d0-88ba-9048e7233b12"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(251),
                            Name = "Interactive.View",
                            NormalizedName = "INTERACTIVE.VIEW"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(262),
                            Description = "Ability to trace data for particular tenant. The permission includes also the ability to see data content what was changed.",
                            Domain = 4,
                            ExternalId = new Guid("77fadd97-22d3-489e-882e-b106f6805bdf"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(262),
                            Name = "Search.DataChangeLogs",
                            NormalizedName = "SEARCH.DATACHANGELOGS"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(276),
                            Description = "Ability to trace data for all tenants. The permission includes also the ability to see data content what was changed.",
                            Domain = 1,
                            ExternalId = new Guid("c5b037e8-1df3-4bc0-92fd-b1cd5c1a1d17"),
                            ModifiedAt = new DateTime(2020, 6, 9, 14, 8, 47, 188, DateTimeKind.Utc).AddTicks(278),
                            Name = "Search.DataChangeLogs.ByTenant",
                            NormalizedName = "SEARCH.DATACHANGELOGS.BYTENANT"
                        });
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ca596c9da25941ca9bb3060d8a58136e",
                            Description = "Tenant Administrator Role is a system role and represents the role with the ability to managing users and roles for the tenant. This role cannot be deleted or edit since it's not a user-defined role.",
                            Enabled = true,
                            ExternalId = new Guid("dffa36f1-df2a-419d-9387-a32509a14d69"),
                            Name = "Tenant.Administrator",
                            NormalizedName = "TENANT.ADMINISTRATOR",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ff6cad4468c44563a898a3c424facb58",
                            Description = "System Tenant Administrator Role is a system role and represents the role with the ability to managing tenants users and roles for the main tenant. This role cannot be deleted or edit since it's not a user-defined role.",
                            Enabled = true,
                            ExternalId = new Guid("cb6165cb-4cdf-4fdc-9951-71a9a0485fb9"),
                            Name = "System.Tenant.Administrator",
                            NormalizedName = "SYSTEM.TENANT.ADMINISTRATOR",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "50f5f5dfb5c14d338db4bcd8daf22153",
                            Description = "Reporting Management is a system role and represents the role with the ability to manage reports. This role cannot be deleted or edit since it's not a user-defined role.",
                            Enabled = true,
                            ExternalId = new Guid("7bfc4797-714b-4fa2-b369-a5c73206800a"),
                            Name = "Reporting.Management",
                            NormalizedName = "REPORTING.MANAGEMENT",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 17,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 17,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(550)")
                        .HasMaxLength(550);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserLogin<int>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey", "TenantId")
                        .IsUnique();

                    b.ToTable("AspNetUserLogins");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.ConfirmationToken", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.User", "User")
                        .WithMany("ConfirmationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Omikron.IdentityService.Infrastructure.Data.Model.RolePermission", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.Permission", "Permission")
                        .WithMany("AssignedRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.Role", "Role")
                        .WithMany("AssignedPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserClaim<int>", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserLogin<int>", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserRole<int>", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finbuckle.MultiTenant.MultiTenantIdentityUserToken<int>", b =>
                {
                    b.HasOne("Omikron.IdentityService.Infrastructure.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
